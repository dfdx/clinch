
(ns clinch.utils)

(defn reducable [f]
  "Makes reducable version of 2-args functions. E.g. you can't do
     (reduce conj '())
   but you can do
     (def rconj (reducable conj))
     (reduce rconj '())"
  (fn [& args]
    (cond (empty? args) args
	  :else (reduce f args))))

(def rconj (reducable conj))
(def rinto (reducable into))

(def caar (comp first first))
(def cadar (comp second first))

(defn list-dir [path]
  (map #(.getPath %) (.listFiles (File. path))))

(defn is-vector? [var]
  (instance? clojure.lang.PersistentVector var))

(defn is-map? [var]
  (instance? java.util.Map var))